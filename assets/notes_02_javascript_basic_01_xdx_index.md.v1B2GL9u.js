import{_ as e,c as i,o as a,U as l}from"./chunks/framework._yD0dLln.js";const r="/web-design/assets/1.BO4edg1w.png",o="/web-design/assets/2.oEPgZvDK.jpg",t="/web-design/assets/3.hlRfXr8b.png",c="/web-design/assets/4.9Vhg8_4r.png",d="/web-design/assets/5.i4K1h97j.png",p="/web-design/assets/6.HSqWXX1o.png",h="/web-design/assets/7.qvrYBQk3.jpeg",s="/web-design/assets/8.jm_aUK-B.jpg",n="/web-design/assets/9.vXfXrMDT.png",u="/web-design/assets/10.oBagU7_y.png",g="/web-design/assets/11.wh_N5q5U.png",_="/web-design/assets/1.r2CjsGkJ.png",k="/web-design/assets/13.l1nU5Ckj.png",S="/web-design/assets/14.vL4J57BX.png",x=JSON.parse('{"title":"第一章：前端的三大核心","description":"","frontmatter":{},"headers":[],"relativePath":"notes/02_javascript_basic/01_xdx/index.md","filePath":"notes/02_javascript_basic/01_xdx/index.md","lastUpdated":1703316799000}'),E={name:"notes/02_javascript_basic/01_xdx/index.md"},v=l('<h1 id="第一章-前端的三大核心" tabindex="-1">第一章：前端的三大核心 <a class="header-anchor" href="#第一章-前端的三大核心" aria-label="Permalink to &quot;第一章：前端的三大核心&quot;">​</a></h1><ul><li>目前，前端最主要掌握的三个知识点就是 <code>HTML</code>、<code>CSS</code> 和 <code>JavaScript</code> 。</li></ul><p><img src="'+r+'" alt="image-20230722100700977"></p><h1 id="第二章-编程语言" tabindex="-1">第二章：编程语言 <a class="header-anchor" href="#第二章-编程语言" aria-label="Permalink to &quot;第二章：编程语言&quot;">​</a></h1><h2 id="_2-1-计算机语言" tabindex="-1">2.1 计算机语言 <a class="header-anchor" href="#_2-1-计算机语言" aria-label="Permalink to &quot;2.1 计算机语言&quot;">​</a></h2><ul><li>在之前，我们已经学习了 HTML 和 CSS 的很多相关知识；其实，HTML 是一种 <code>标记语言</code>，CSS 是一种 <code>样式语言</code> 。</li><li>HTML 和 CSS 本身都属于<code>计算机语言</code>，因为它们都可以和计算机进行沟通交流。 <ul><li>在生活中，如果两个人想要沟通，必然需要借助语言（中文、英文、法语、德语等）作为媒介。</li></ul></li><li>其实，计算机语言就是<code>我们（人）和计算机进行交流</code>而需要学习的语言。</li><li>网页的三大组成部分的另一个核心就是 <code>JavaScript</code>；所以，<code>JavaScript</code> 必须也是一种计算机语言。</li></ul><p><img src="'+o+'" alt="HTML5, CSS3 &amp; JavaScript - Aptech Compter Training"></p><h2 id="_2-2-编程语言" tabindex="-1">2.2 编程语言 <a class="header-anchor" href="#_2-2-编程语言" aria-label="Permalink to &quot;2.2 编程语言&quot;">​</a></h2><ul><li><p>其实，对于像 JavaScript 这类的语言更准确的说法：一种<code>编程语言</code>。</p></li><li><p>我们先来搞清<code>计算机语言</code>和<code>编程语言</code>的关系和区别：</p><ul><li>计算机语言（computer language）是指用于人和计算机之间进行通讯的语言，是人和计算机之间传递信息的媒介。但是其概念要比通用的<code>编程语言</code>更为广泛。例如：HTML 是<code>标记语言</code>，也是<code>计算机语言</code>，却不是<code>编程语言</code>。</li><li>编程语言（programming language），是用来定义<code>计算机程序的形式语言</code>。它是一种被<code>标准化</code>的交流技巧，用来<code>向计算机发出指令</code>，一种能够让<code>程序员</code>准确的定义<code>计算机所需要使用数据</code>的计算机语言，并精确的定义<code>在不同情况下所应当采取的行动</code>。</li></ul></li><li><p>编程语言的特点：</p><ul><li>① <code>数据和数据结构</code>。</li><li>② <code>指令和流程控制</code>。</li><li>③ <code>引用机制和重用机制</code>。</li><li>④ <code>设计哲学</code>。</li><li>……</li></ul></li><li><p>其实，计算机语言和编程语言都是用于人和计算机交流的工具，只是其设计的目标和特点略有不同，以满足计算机和程序员的不同需求而已！</p></li></ul><h2 id="_2-3-常见的编程语言" tabindex="-1">2.3 常见的编程语言 <a class="header-anchor" href="#_2-3-常见的编程语言" aria-label="Permalink to &quot;2.3 常见的编程语言&quot;">​</a></h2><ul><li>常见的编程语言：</li></ul><p><img src="'+t+'" alt=""></p><h2 id="_2-4-计算机语言的分类" tabindex="-1">2.4 计算机语言的分类 <a class="header-anchor" href="#_2-4-计算机语言的分类" aria-label="Permalink to &quot;2.4 计算机语言的分类&quot;">​</a></h2><ul><li>计算机语言可以根据不同的特征和用途来进行分类，下面是一些常见的计算机语言分类：</li><li>编程范式分类： <ul><li>过程式语言：使用过程或函数来组织代码，如：C、Fortran 等。</li><li>面向对象语言：基于类和对象的编程范式，如：Java、C++、Python 等。</li><li>函数式语言：将计算视为数学函数的计算范式，如：Lisp、Haskell 等。</li><li>逻辑式语言：使用逻辑规则来推导和描述问题的范式，如：Prolog 等。</li></ul></li><li>抽象级别分类： <ul><li>机器语言：计算机能直接运行的语言，由 0 或 1 组成。</li><li>低级语言：直接操作硬件和计算机体系结构的语言，如：汇编语言。</li><li>高级语言：更接近人类自然语言的语言，如：Python、Java、C++ 等。</li></ul></li><li>用途分类： <ul><li>通用编程语言：用于接近各种不同类型问题的语言，如：C、Python、Java 等。</li><li>领域特定语言（DSL）：专门用于解决特定领域问题的语言，如：SQL（用于数据库查询）、HTML（用于网页标签）等。</li></ul></li><li>编译方式分类： <ul><li>编译型语言：源代码在运行前被编译成机器代码，然后由计算机直接执行，如：C、C++。</li><li>解释型语言：源代码逐行由解释器解释并执行，如：Python、JavaScript。</li></ul></li><li>开发领域分类： <ul><li>WEB 开发语言：用于开发 WEB 应用程序的语言，如：HTML、CSS、JavaScript、PHP、Ruby 等。</li><li>数据库查询语言：用于访问和操作数据库的语言，如：SQL。</li></ul></li><li>跨平台分类： <ul><li>跨平台语言：可以在不同操作系统上运行的语言，如：Java、Python。</li><li>特定平台的语言：只能在特定操作系统或硬件上运行的语言，如：Swift 。</li></ul></li></ul><h2 id="_2-5-计算机语言的发展史" tabindex="-1">2.5 计算机语言的发展史 <a class="header-anchor" href="#_2-5-计算机语言的发展史" aria-label="Permalink to &quot;2.5 计算机语言的发展史&quot;">​</a></h2><h3 id="_2-5-1-机器语言" tabindex="-1">2.5.1 机器语言 <a class="header-anchor" href="#_2-5-1-机器语言" aria-label="Permalink to &quot;2.5.1 机器语言&quot;">​</a></h3><ul><li>概念： <ul><li>计算机的存储单元只有 <code>0</code> 和 <code>1</code> 两种状态，因此一串代码要让计算机“读懂”，这串代码只能由数字 <code>0</code> 和 <code>1</code> 组成。</li><li>像这种由数字 <code>0</code> 和 <code>1</code> 按照一定的规律组成的代码就叫<code>机器码</code>，也叫<code>二进制编码</code>。</li><li>一定长度的机器码组成了<code>机器指令</code>，<code>用这些机器指令所编写的程序</code>就称为<code>机器语言</code>。</li></ul></li></ul><p><img src="'+c+'" alt=""></p><ul><li>优点： <ul><li>代码能够<code>被计算机直接识别</code>，<code>不需要经过编译解析</code>。</li><li>直接对硬件产生作用，<code>程序的执行效率非常高</code>。</li></ul></li><li>缺点： <ul><li>程序全是 <code>0</code> 和 <code>1</code> 的指令代码，<code>可读性差</code>，<code>容易出错</code>。</li><li>不太容易编写（目前，很少有人这样开发）。</li></ul></li></ul><h3 id="_2-5-2-汇编语言" tabindex="-1">2.5.2 汇编语言 <a class="header-anchor" href="#_2-5-2-汇编语言" aria-label="Permalink to &quot;2.5.2 汇编语言&quot;">​</a></h3><ul><li>概念： <ul><li>为了解决机器语言的缺陷，<code>人们发明了另外一种语言---汇编语言</code>。</li><li>这种语言使用<code>符号</code>来<code>代替冗长的、难以记忆的 0 和 1 的代码</code>。</li><li>像 <code>mov/push</code> 这样的指令，经过<code>编译器</code>，编译成<code>机器代码</code>。</li></ul></li></ul><p><img src="'+d+'" alt="image-20230719095612117"></p><ul><li>优点： <ul><li>可以<code>像机器语言</code>一样，<code>直接访问、控制计算机的各种硬件设备</code>。</li><li><code>占用内存少、执行速度快</code>。</li></ul></li><li>缺点： <ul><li>① <code>不同的机器有不同的汇编语言语法和编译器，代码可移植性差</code>；换言之，一种程序只能在一种机器上运行。</li><li>② <code>符号非常多、难以记忆</code>；即使是完成简单的功能也需要大量的汇编语言代码，容易产生 BUG ，也难以调试。</li></ul></li><li>应用场景：操作系统内核、驱动程序、单片机程序。</li></ul><blockquote><p>注意：其实，实际开发中，使用汇编开发的机会是很少了；并且，C 语言也可以直接访问和操作底层硬件。</p></blockquote><h3 id="_2-5-3-高级语言" tabindex="-1">2.5.3 高级语言 <a class="header-anchor" href="#_2-5-3-高级语言" aria-label="Permalink to &quot;2.5.3 高级语言&quot;">​</a></h3><ul><li>概念： <ul><li>高级语言，更加<code>接近自然语言</code>，更<code>符合人类的思维方式</code>。</li><li>和人交流的方式类似；不过，绝大多数的编程语言都是国外发明的，因为比较<code>接近于英文的交流方式</code>。</li></ul></li></ul><p><img src="'+p+'" alt=""></p><ul><li>优点： <ul><li><code>简单、易学、易于理解</code>，语法和结构很像普通的英文。</li><li><code>远离对硬件的直接操作</code>，一般人经过系统学习之后都可以编程，<code>不太需要了解底层硬件知识</code>。</li><li>程序的移植性好（针对 <code>跨平台</code> 语言来说）。</li></ul></li><li>缺点： <ul><li>程序不能直接被计算机识别，需要经过编译器编译成二进制指令，才能被运行到计算机上。</li><li>种类繁多：Java、C、C#、C++、JavaScript 等。</li></ul></li></ul><h1 id="第三章-初识-javascript" tabindex="-1">第三章：初识 JavaScript <a class="header-anchor" href="#第三章-初识-javascript" aria-label="Permalink to &quot;第三章：初识 JavaScript&quot;">​</a></h1><h2 id="_3-1-概述" tabindex="-1">3.1 概述 <a class="header-anchor" href="#_3-1-概述" aria-label="Permalink to &quot;3.1 概述&quot;">​</a></h2><ul><li><p>维基百科的定义：</p><ul><li>JavaScript（通常缩写为 JS）是一门<a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E5%9E%8B%E7%BC%96%E7%A8%8B" target="_blank" rel="noreferrer">基于原型</a>和<a href="https://zh.wikipedia.org/wiki/%E5%A4%B4%E7%AD%89%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">头等函数</a>的多范式<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">高级</a><a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80" target="_blank" rel="noreferrer">解释型</a><a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">编程语言</a>[<a href="https://zh.wikipedia.org/wiki/JavaScript#cite_note-:0-9" target="_blank" rel="noreferrer">9]</a>[<a href="https://zh.wikipedia.org/wiki/JavaScript#cite_note-:1-10" target="_blank" rel="noreferrer">10]</a>，它支持<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noreferrer">面向对象</a>程序设计、<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">指令式编程</a>和<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">函数式编程</a>。它提供方法来操控文本、<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84" target="_blank" rel="noreferrer">数组</a>、日期以及<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noreferrer">正则表达式</a>等。不支持<a href="https://zh.wikipedia.org/wiki/I/O" target="_blank" rel="noreferrer">I/O</a>，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它由<a href="https://zh.wikipedia.org/wiki/Ecma%E5%9B%BD%E9%99%85" target="_blank" rel="noreferrer">ECMA（欧洲电脑制造商协会）</a>通过<a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noreferrer">ECMAScript</a>实现语言的标准化[<a href="https://zh.wikipedia.org/wiki/JavaScript#cite_note-:0-9" target="_blank" rel="noreferrer">9]</a>。目前，它被世界上的绝大多数网站所使用，也被世界主流<a href="https://zh.wikipedia.org/wiki/%E6%B5%8F%E8%A7%88%E5%99%A8" target="_blank" rel="noreferrer">浏览器</a>（<a href="https://zh.wikipedia.org/wiki/Google_Chrome" target="_blank" rel="noreferrer">Chrome</a>、<a href="https://zh.wikipedia.org/wiki/Internet_Explorer" target="_blank" rel="noreferrer">IE</a>、<a href="https://zh.wikipedia.org/wiki/Firefox" target="_blank" rel="noreferrer">Firefox</a>、<a href="https://zh.wikipedia.org/wiki/Safari" target="_blank" rel="noreferrer">Safari</a>和<a href="https://zh.wikipedia.org/wiki/Opera%E9%9B%BB%E8%85%A6%E7%80%8F%E8%A6%BD%E5%99%A8" target="_blank" rel="noreferrer">Opera</a>）所支持。</li><li>JavaScript 与<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noreferrer">Java</a> 在名字和语法上都很相似，但这两门编程语言从设计之初就有很大不同。JavaScript 在语言设计上主要受到了<a href="https://zh.wikipedia.org/wiki/Self" target="_blank" rel="noreferrer">Self</a>（一种基于原型的编程语言）和 <a href="https://zh.wikipedia.org/wiki/Scheme" target="_blank" rel="noreferrer">Scheme</a>（一门函数式编程语言）的影响[<a href="https://zh.wikipedia.org/wiki/JavaScript#cite_note-:1-10" target="_blank" rel="noreferrer">10]</a>，在语法结构上它和<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">C语言</a>很相似（如 if 条件语句、switch 语句、while 循环和 do-while 循环等）[<a href="https://zh.wikipedia.org/wiki/JavaScript#cite_note-11" target="_blank" rel="noreferrer">11]</a>。</li><li>对于客户端来说，JavaScript 通常被实现为一门解释语言，但如今它已经可以被<a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF" target="_blank" rel="noreferrer">即时编译</a>（JIT）。随着 <a href="https://zh.wikipedia.org/wiki/HTML5" target="_blank" rel="noreferrer">HTML5</a> 和 <a href="https://zh.wikipedia.org/wiki/CSS3" target="_blank" rel="noreferrer">CSS3</a> 语言标准的推行，它还可以用于游戏、桌面和移动应用程序的开发，以及在服务器端网络环境运行（如 <a href="https://zh.wikipedia.org/wiki/Node.js" target="_blank" rel="noreferrer">Node.js</a>）。</li></ul></li><li><p>从上面的定义中，我们可以看到很多的关键字：<code>解释型编程语言</code>、<code>原型</code>、<code>头等函数</code>、<code>多范式</code>、<code>面向对象程序设计</code>、<code>指令式编程</code>、<code>函数式编程</code>；这些关键字暂时不需要了解，后面会依次提及！</p></li><li><p>简而言之，JavaScript 是<code>一门高级编程语言</code>，是目前前端开发的<code>重要组成部分</code>。</p></li></ul><h2 id="_3-2-javascript-的历史" tabindex="-1">3.2 JavaScript 的历史 <a class="header-anchor" href="#_3-2-javascript-的历史" aria-label="Permalink to &quot;3.2 JavaScript 的历史&quot;">​</a></h2><ul><li>1994 年，网景公司（Netscape）发布了 Navigator 浏览器的 0.9 版。 <ul><li>这是历史上<code>第一个比较成熟的网络浏览器</code>，轰动一时。</li><li>但是，这个版本的浏览器只能用来浏览，不具备和访问者互动的能力。</li></ul></li></ul><p><img src="'+h+'" alt=""></p><ul><li>当时，网景公司想要选择一种语言来嵌入到浏览器中： <ul><li><code>采用现有的语言</code>，如：Perl、Python、TCL 、Scheme 等，允许它们直接嵌入网页。</li><li>1995 年，网景公司招募了程序员 <code>Brendan Eich</code>，希望将 <code>Scheme</code> 语言作为网页脚本语言的可能性。</li></ul></li></ul><p><img src="'+s+'" alt=""></p><ul><li><p>与此同时，1995 年的时候，Sun 公司将 Java 语言，正式向市场推出：</p><ul><li>Java 推出之后立马在市场上引起了轰动，Java 当初有一个口号：“write once run anywhere”；</li><li>网景公司动了心，决定与 Sun 公司结成联盟，希望将 Java 嵌入到网页中来运行；</li><li>Brendan Eich 本人非常热衷于 Scheme，但是管理层那个时候有点倾向于 Java，希望可以简化 Java 来适应网页脚本的需求；</li></ul></li><li><p>于是，Brendan Eich 花了 10 天的时间设计了 JavaScript 。</p><ul><li>最初这门语言的名字是 Mocha（摩卡）；</li><li>在 Navigator 2.0 beta 版本更名为 LiveScript；</li><li>在 Navigator 2.0 beta 3 版本正式重命名为 <code>JavaScript</code>，当时是为了给这门语言搭上 Java 这个热词；</li></ul></li><li><p>当然， 10 天设计出来语言足够说明 Brendan Eich 是天才，但是这门语言当时更像是一个多种语言的大杂烩：</p><ul><li>借鉴 <code>C</code> 语言的<code>基本语法</code>。</li><li>借鉴 <code>Java</code> 语言的数据类型和<code>内存管理</code>。</li><li>借鉴 <code>Scheme</code> 语言，将<code>函数</code>提升到 <code>&quot;第一等公民&quot;（first class）</code>的地位；</li><li>借鉴 <code>Self</code> 语言，使用基于<code>原型（prototype）</code>的继承机制。</li></ul></li></ul><blockquote><p>注意：</p><ul><li>其实，早期 Java 是可以直接运行在浏览器中的，是一种称为 applet 的技术；但是，现代的浏览器已经取消了对 applet 的支持。</li><li>其实，Java 也是可以开发 WEB 应用程序的；只不过，需要使用 Kotlin-js 这个项目。并且，该项目的想法和 TypeScript 的思路一致，就是给 JavaScript 提供类型系统；毕竟，JavaScript 的类型是动态的，不利于大型 WEB 项目的开发和维护。</li></ul></blockquote><ul><li>微软公司于 1995 年首次推出 Internet Explorer ，从而引发了与 Netscape 的浏览器大战。 <ul><li>微软对 Netscape Navigator 解释器进行了逆向工程，创建了JScript，以与处于市场领导地位的网景产品同台竞争；</li><li>这个时候对于开发者来说是一场噩耗，因为需要针对不同的浏览器进行不同的适配；</li></ul></li><li>1996 年 11 月，网景正式向 ECMA（欧洲计算机制造商协会）提交语言标准。 <ul><li>1997 年 6 月，ECMA 以 JavaScript 语言为基础制定了 ECMAScript 标准规范 ECMA-262 。</li><li>ECMA-262 是一份标准，定义了 ECMAScript 。</li><li>JavaScript 成为了 ECMAScript 最著名的实现之一。</li><li>除此之外，ActionScript 和 JScript 也都是 ECMAScript 规范的实现语言；</li></ul></li></ul><p><img src="'+n+'" alt="image-20230719104119602"></p><ul><li>所以，ECMAScript 是一种规范，而 JavaScript 是这种规范的一种实现。</li></ul><blockquote><p>注意：在现代 Web 开发中，JavaScript 成为了主要的客户端脚本语言。微软也逐渐放弃了对 JScript 的更新支持，转而支持更加标准化和现代化的 JavaScript 。</p></blockquote><h2 id="_3-3-javascript-的组成" tabindex="-1">3.3 JavaScript 的组成 <a class="header-anchor" href="#_3-3-javascript-的组成" aria-label="Permalink to &quot;3.3 JavaScript 的组成&quot;">​</a></h2><ul><li>ECMAScript 是 JavaScript 的标准，描述了该语言的语法和基本对象。 <ul><li>JavaScript 是 ECMAScript 的语言层面的实现。</li><li>JavaScript 因为需要对页面和浏览器进行各种操作；所以，还提供了 <code>DOM 操作</code>和 <code>BOM 操作</code>。</li></ul></li><li>目前，我们会针对性的学习 ECMAScript，即语言层面的内容，特别是 ES5 之前的语法。</li></ul><p><img src="'+u+'" alt="image-20230719104558103"></p><ul><li>ES 的版本历史：</li></ul><p><img src="'+g+'" alt="image-20230719110608223"></p><h2 id="_3-4-javascript-由谁运行" tabindex="-1">3.4 JavaScript 由谁运行？ <a class="header-anchor" href="#_3-4-javascript-由谁运行" aria-label="Permalink to &quot;3.4 JavaScript 由谁运行？&quot;">​</a></h2><ul><li>我们经常会说：不同的浏览器有不同的内核组成 <ul><li>Gecko：早期被 Netscape 和 Mozilla Firefox 浏览器使用；</li><li>Trident：微软开发，被 IE4~IE11 浏览器使用，但是 Edge 浏览器已经转向 Blink；</li><li>Webkit：苹果基于 KHTML 开发、开源的，用于 Safari，Google Chrome 之前也在使用；</li><li>Blink：是 Webkit 的一个分支，Google 开发，目前应用于 Google Chrome、Edge、Opera 等；</li><li>……</li></ul></li><li>其实，我们经常说的浏览器内核指的是浏览器的排版引擎（渲染引擎）。</li><li>那么，JavaScript 是由 <code>JavaScript 引擎</code>来执行的。</li></ul><h2 id="_3-5-javascript-引擎" tabindex="-1">3.5 JavaScript 引擎 <a class="header-anchor" href="#_3-5-javascript-引擎" aria-label="Permalink to &quot;3.5 JavaScript 引擎&quot;">​</a></h2><ul><li>为什么需要 JavaScript 引擎？ <ul><li>前文说过，<code>高级编程语言</code>都是需要转换成<code>机器语言</code>来执行的。</li><li>我们编写的 JavaScript 无论是<code>交给浏览器还是 Node 执行</code>，最终都是需要交给 <code>CPU</code> 来执行。</li><li>但是，CPU 只识别自己的指令集（机器代码）。</li><li>那么，我们就需要 <code>JavaScript 引擎</code>帮助我们将 <code>JavaScript 代码</code>翻译为 <code>CPU 指令</code>来执行。</li></ul></li><li>比较常见的 JavaScript 引擎： <ul><li>SpiderMonkey：第一款 JavaScript 引擎，由 Brendan Eich 开发（也就是 JavaScript 作者）；</li><li>Chakra：微软开发，用于 IT 浏览器；</li><li>JavaScriptCore：WebKit 中的 JavaScript 引擎，Apple 公司开发；</li><li>V8：Google 开发的强大 JavaScript 引擎，也帮助 Chrome 从众多浏览器中脱颖而出。</li><li>……</li></ul></li></ul><h2 id="_3-6-浏览器内核和-javascript-引擎的关系" tabindex="-1">3.6 浏览器内核和 JavaScript 引擎的关系 <a class="header-anchor" href="#_3-6-浏览器内核和-javascript-引擎的关系" aria-label="Permalink to &quot;3.6 浏览器内核和 JavaScript 引擎的关系&quot;">​</a></h2><ul><li>以 webkit 为例，webkit 实际上由以下两部分组成： <ul><li>WebCore：负责 HTML 解析、布局、渲染等等相关的工作。</li><li>JavaScriptCore：解析、执行 JavaScript 代码。</li></ul></li></ul><p><img src="'+_+'" alt="image-20230719112156897"></p><ul><li>其实，小程序也是这样的划分：在小程序中编写的 JavaScript 代码就是被 JavaScriptCore（JSCore） 执行的。</li></ul><p><img src="'+k+'" alt="微信小程序技术原理分析"></p><h2 id="_3-7-javascript-的应用" tabindex="-1">3.7 JavaScript 的应用 <a class="header-anchor" href="#_3-7-javascript-的应用" aria-label="Permalink to &quot;3.7 JavaScript 的应用&quot;">​</a></h2><ul><li>JavaScript 的应用：</li></ul><p><img src="'+S+'" alt="image-20230719112613391"></p>',59),f=[v];function b(w,J,m,A,B,C){return a(),i("div",null,f)}const P=e(E,[["render",b]]);export{x as __pageData,P as default};
