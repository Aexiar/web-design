import{_ as i,c as a,o as s,a6 as l}from"./chunks/framework.B35GJEU-.js";const e="/web-design/assets/1.DigmMlzf.png",n="/web-design/assets/2.Bbk0jSf1.jpeg",t="/web-design/assets/3.D5bfJJ8Z.jpeg",p="/web-design/assets/4.C4wN7EQ0.png",r="/web-design/assets/5.BqTuhuXq.png",h="/web-design/assets/6.DwwYWoPa.png",o="/web-design/assets/7.Ds0dLbzk.jpg",d="/web-design/assets/8.XjQJ1rG7.jpg",c="/web-design/assets/9.C-i-e5W6.jpg",k="/web-design/assets/10.es7ERQNG.jpg",E="/web-design/assets/11.CVTzEUNe.jpg",u="/web-design/assets/12.CDhJzMVO.jpg",g="/web-design/assets/13.DK2ANTEy.jpg",w=JSON.parse('{"title":"第一章：JavaScript 的内存管理（了解）","description":"","frontmatter":{},"headers":[],"relativePath":"notes/03_javascript_advanced/04_xdx/index.md","filePath":"notes/03_javascript_advanced/04_xdx/index.md","lastUpdated":1705914313000}'),m={name:"notes/03_javascript_advanced/04_xdx/index.md"},y=l('<h1 id="第一章-javascript-的内存管理-了解" tabindex="-1">第一章：JavaScript 的内存管理（了解） <a class="header-anchor" href="#第一章-javascript-的内存管理-了解" aria-label="Permalink to &quot;第一章：JavaScript 的内存管理（了解）&quot;">​</a></h1><h2 id="_1-1-认识内存管理" tabindex="-1">1.1 认识内存管理 <a class="header-anchor" href="#_1-1-认识内存管理" aria-label="Permalink to &quot;1.1 认识内存管理&quot;">​</a></h2><ul><li>不管什么样的编程语言，<code>在代码的执行过程中都需要给它分配内存</code>；不同的是，<code>有些编程语言</code>需要我们<code>手动</code>管理内存，而<code>有些编程语言</code>会<code>自动</code>帮助我们管理内存。</li><li>不管以什么样的方式来管理内存，<code>内存管理的生命周期</code>如下： <ul><li>① 分配程序员所申请的内存。</li><li>② 使用分配的内存。</li><li>③ 不需要使用的时候，将这块内存释放掉。</li></ul></li></ul><blockquote><p>注意：内存在计算机中扮演着重要的角色，它提供了临时存储和快速访问数据的功能，对于计算机的运行效率和性能起着至关重要的作用。它的作用主要有以下几个方面：</p><ul><li>① 存储数据：内存可以临时存储计算机正在运行的程序和数据。当计算机执行程序时，需要将程序和数据加载到内存中，以便CPU能够快速访问和处理。内存的读写速度比硬盘和其他外部存储设备快得多，因此可以提高计算机的运行效率。</li><li>② 运行程序：内存是计算机运行程序的主要场所。当用户打开一个应用程序或者操作系统启动时，相关的程序代码和数据会被加载到内存中，并由CPU进行处理。内存的容量和速度会影响计算机的性能和运行速度。</li><li>③ 缓存数据：内存还可以用作数据缓存。计算机在访问外部存储设备（如硬盘）时，会将一部分数据缓存到内存中，以便快速访问。这样可以减少对外部存储设备的读写次数，提高数据访问的速度。</li><li>④ 交换数据：内存还可以用于数据的交换和传输。不同的程序之间可以通过内存来传递数据，以实现数据共享和通信。例如，操作系统可以使用内存来传递数据给应用程序，应用程序可以使用内存来传递数据给外部设备。</li></ul></blockquote><ul><li><p>不同的编程语言对于上面<code>内存管理</code> 的<code>第一步</code>和<code>第三步</code>有所不同：</p><ul><li><code>手动管理内存</code>：像 C、C++ 等语言，就需要程序员去手动申请和释放内存。</li><li><code>自动管理内存</code>：像 Java 等语言，会有 GC（垃圾收集器）帮助我们管理内存。</li></ul></li><li><p>同理，对于 JavaScript 来说，也是自动帮助开发者管理内存的；换言之，JavaScript 引擎也有自己的 GC 。</p></li></ul><h2 id="_1-2-javascript-的内存管理" tabindex="-1">1.2 JavaScript 的内存管理 <a class="header-anchor" href="#_1-2-javascript-的内存管理" aria-label="Permalink to &quot;1.2 JavaScript 的内存管理&quot;">​</a></h2><ul><li>JavaScript 会在定义数据的时候为我们分配好内存。 <ul><li>对于<code>基本数据类型</code>的数据，是直接在<code>栈</code>空间中分配的；</li><li>对于<code>引用数据类型</code>的数据，是在<code>堆</code>空间中开辟一块空间，并且将这块空间的指针返回给变量引用。</li></ul></li><li>其<code>内存简图</code>如下：</li></ul><p><img src="'+e+'" alt="image-20230809151002051" loading="lazy"></p><h2 id="_1-3-javascript-的垃圾回收" tabindex="-1">1.3 JavaScript 的垃圾回收 <a class="header-anchor" href="#_1-3-javascript-的垃圾回收" aria-label="Permalink to &quot;1.3 JavaScript 的垃圾回收&quot;">​</a></h2><ul><li><p>因为内存的<code>总量</code>是<code>有限</code>的，当内存中的东西<code>不再需要的</code>时候，我们就需要对其进行<code>释放</code>，以便腾出更多的内存空间做其他的事情。</p></li><li><p>在<code>手动管理内存</code>中的语言中，我们需要通过一些方式来释放不需要的内存，如：free 函数。</p><ul><li>这种管理内存的方式<code>非常低效</code>，<code>影响</code>了我们编程的<code>效率</code>。</li><li>并且，这种管理内存的方式对开发者的<code>要求也很高</code>，<code>一不小心</code>就会产生<code>内存泄漏</code>。</li></ul></li><li><p><code>现代</code>的编程语言都有自己的<code>垃圾回收机制</code>。</p><ul><li>垃圾回收（是Garbage Collection），简称 GC 。</li><li>对于<code>哪些不再使用的对象</code>，我们就认为是<code>垃圾</code>，就应该<code>被回收</code>，以便释放出更多的内存空间。</li><li>很多编程语言都有 GC，如：Java 的 JVM，JavaScript 的 JavaScript 引擎。</li></ul></li><li><p>那么，<code>GC 是怎么知道哪些对象不需要再使用的</code>？<code>内存泄漏</code>和<code>内存溢出</code>又到底是什么？</p></li></ul><h2 id="_1-4-内存泄漏-memory-leak-vs-内存溢出-memory-overflow" tabindex="-1">1.4 内存泄漏（Memory Leak） VS 内存溢出（Memory Overflow） <a class="header-anchor" href="#_1-4-内存泄漏-memory-leak-vs-内存溢出-memory-overflow" aria-label="Permalink to &quot;1.4 内存泄漏（Memory Leak） VS 内存溢出（Memory Overflow）&quot;">​</a></h2><h3 id="_1-4-1-生活中的汽车油箱漏油" tabindex="-1">1.4.1 生活中的汽车油箱漏油 <a class="header-anchor" href="#_1-4-1-生活中的汽车油箱漏油" aria-label="Permalink to &quot;1.4.1 生活中的汽车油箱漏油&quot;">​</a></h3><ul><li>想象如果我们有一辆汽车，它需要汽油来运行。</li></ul><p><img src="'+n+'" alt="快停车，你车漏油了！”_搜狐汽车_搜狐网" loading="lazy"></p><ul><li>汽车油箱存放着汽油，而漏油是指油箱中的汽油不断流失，而且你无法控制它。这会导致一些问题： <ul><li>① 浪费资源：漏油会导致汽车在没有产生任何价值的情况下消耗更多的汽油（相当于内存泄漏中内存资源的浪费）。</li><li>② 效能下降：随着时间的推移，你的汽车将会耗尽燃料，最终无法正常运行（相当于内存泄漏会耗尽系统的可用内存，导致程序崩溃或性能下降）。</li><li>③ 稳定性问题：如果在远程地区的路上，突然油箱漏油，可能会导致车辆无法继续前进，使我们陷入困境（相当于内存泄漏会导致程序无法继续执行，影响系统的稳定性）。</li></ul></li></ul><h3 id="_1-4-2-计算机中的内存泄漏-memory-leak" tabindex="-1">1.4.2 计算机中的内存泄漏（Memory Leak） <a class="header-anchor" href="#_1-4-2-计算机中的内存泄漏-memory-leak" aria-label="Permalink to &quot;1.4.2 计算机中的内存泄漏（Memory Leak）&quot;">​</a></h3><ul><li>内存泄漏（Memory Leak）是指在程序运行过程中，由于某些原因<code>导致分配的内存（堆内存中对象等）</code>无法被正常释放，从而导致系统中的<code>可用内存</code>逐渐减少，最终可能<code>耗尽所有可用内存</code>，导致程序崩溃或系统变得非常缓慢。</li><li>内存泄漏（Memory Leak）可能会影响系统的稳定性，因为操作系统需要管理内存资源，当可用内存不足时，操作系统<code>可能</code>会中止程序以保护整个系统。</li></ul><h3 id="_1-4-3-如何理解计算机中的内存泄漏-memory-leak" tabindex="-1">1.4.3 如何理解计算机中的内存泄漏（Memory Leak）？ <a class="header-anchor" href="#_1-4-3-如何理解计算机中的内存泄漏-memory-leak" aria-label="Permalink to &quot;1.4.3 如何理解计算机中的内存泄漏（Memory Leak）？&quot;">​</a></h3><ul><li>【问】内存从某种意义上讲，应该是可再生的资源，怎么会有内存泄漏问题？为什么会命名内存泄漏？和汽车漏油有联系？</li><li>【答】其实，内存可再生的逻辑就是：将内存中<code>不再使用的对象（垃圾）</code>，通过手动回收或 GC 回收来达到内存可再生的目的。但是，如果<code>不再使用的对象（垃圾）</code>，随着时间的推移越来越多，不就像汽车漏油一样，可以使用到的内存越来越少，最终导致程序崩溃或系统变得非常缓慢。</li></ul><h3 id="_1-4-4-计算机中的内存溢出-memory-overflow" tabindex="-1">1.4.4 计算机中的内存溢出（Memory Overflow） <a class="header-anchor" href="#_1-4-4-计算机中的内存溢出-memory-overflow" aria-label="Permalink to &quot;1.4.4 计算机中的内存溢出（Memory Overflow）&quot;">​</a></h3><ul><li>内存溢出（Memory Overflow）是指程序<code>试图分配</code>超过<code>其可用内存范围</code>的内存空间。这可能会导致程序覆盖其他数据、代码或系统区域的内存，从而引发严重的错误，如：崩溃、数据损坏或安全漏洞。</li></ul><h3 id="_1-4-5-如何理解计算机中的内存溢出-memory-overflow" tabindex="-1">1.4.5 如何理解计算机中的内存溢出（Memory Overflow）？ <a class="header-anchor" href="#_1-4-5-如何理解计算机中的内存溢出-memory-overflow" aria-label="Permalink to &quot;1.4.5 如何理解计算机中的内存溢出（Memory Overflow）？&quot;">​</a></h3><ul><li><p>内存溢出（Memory Overflow）最为常见的就是<code>栈溢出</code>，当我们调用函数的时候，一层一层的往下调用，如：递归函数，递归函数的层数过多，既有可能会引起<code>栈溢出</code>，并且<code>栈空间</code>总是有限的。</p></li><li><p>栈结构的<code>特点</code>是<code>先入后出</code>，就和小时候，学习的<code>乌鸦喝水</code>类似，当乌鸦不同的向瓶子中扔石头，最终水就会溢出来。</p></li></ul><p><img src="'+t+'" alt="卡通手绘寓言故事乌鸦喝水元素PNG图片素材下载_手绘PNG_熊猫办公" loading="lazy"></p><h3 id="_1-4-6-总结" tabindex="-1">1.4.6 总结 <a class="header-anchor" href="#_1-4-6-总结" aria-label="Permalink to &quot;1.4.6 总结&quot;">​</a></h3><ul><li>内存泄漏导致了未释放内存的浪费和系统资源的逐渐耗尽，而内存溢出则涉及对程序访问超出分配的内存范围，可能导致崩溃、数据损坏和安全问题。</li><li>在编程中，及时检测和解决内存泄漏和内存溢出问题是保证程序稳定性和性能的重要步骤。</li></ul><h2 id="_1-5-垃圾回收算法" tabindex="-1">1.5 垃圾回收算法 <a class="header-anchor" href="#_1-5-垃圾回收算法" aria-label="Permalink to &quot;1.5 垃圾回收算法&quot;">​</a></h2><h3 id="_1-5-1-引用计数-reference-counting" tabindex="-1">1.5.1 引用计数（Reference counting） <a class="header-anchor" href="#_1-5-1-引用计数-reference-counting" aria-label="Permalink to &quot;1.5.1 引用计数（Reference counting）&quot;">​</a></h3><ul><li>JavaScript 中最简单的垃圾回收算法是<code>引用计数</code>。 <ul><li>当一个对象有一个引用指向它时，那么这个对象的引用就 +1 。</li><li>当一个对象的引用为 0 时，这个对象就可以被回收。</li></ul></li><li>然而，这种算法<code>无法解决循环引用</code>的问题，即两个或多个对象相互引用，但没有被其他对象引用。</li><li>因此，现代的 JavaScript 引擎往往采用其他更高级的垃圾回收算法。</li></ul><p><img src="'+p+'" alt="image-20230809160330001" loading="lazy"></p><h3 id="_1-5-2-标记清除-mark-sweep" tabindex="-1">1.5.2 标记清除（mark-Sweep） <a class="header-anchor" href="#_1-5-2-标记清除-mark-sweep" aria-label="Permalink to &quot;1.5.2 标记清除（mark-Sweep）&quot;">​</a></h3><ul><li><code>标记清除</code>的核心思路是<code>可达性（Reachability）</code>，也称为<code>可达性算法</code>。</li><li>这个算法是设置一个<code>根对象（root object，其实就是 window 对象）</code>，垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于哪些 没有引用到的对象，就认为是不可用的对象。</li><li>这种算法<code>可以解决循环引用</code>的问题，即两个或多个对象相互引用，但没有被其他对象引用。</li></ul><p><img src="'+r+'" alt="image-20230809160908626" loading="lazy"></p><h3 id="_1-5-3-其它的-gc-算法" tabindex="-1">1.5.3 其它的 GC 算法 <a class="header-anchor" href="#_1-5-3-其它的-gc-算法" aria-label="Permalink to &quot;1.5.3 其它的 GC 算法&quot;">​</a></h3><ul><li><code>标记整理（Mark-Compact）</code> 和 <code>标记－清除</code>相似；不同的是，回收期间同时会将保留的存储对象搬运汇集到连续的内存空间，从而整合空闲空间，避免内存碎片化。</li><li>分代收集算法（Generational Collection）， 这个算法基于一个观察：大部分对象在内存中存在的时间很短，而只有少数对象存活更久。因此，分代收集将对象分成几代，通常是新生代和老生代。新生代包含短命的对象，老生代包含存活时间较长的对象。这样可以采用不同的收集策略，更频繁地收集新生代，较少地收集老生代，从而提高效率。</li><li>并行收集和并发收集： 一些 GC 算法可以并行或并发地执行，以减少 GC 对应用程序的影响。并行收集指同时使用多个线程进行垃圾收集，而并发收集则是在应用程序运行的同时执行垃圾收集。</li><li>增量标记算法（Incremental Marking）：为了减少 GC 对应用程序的停顿时间，一些现代的 JavaScript 引擎采用增量标记算法。它将标记阶段分成多个小步骤，每次执行一小步，然后让应用程序继续执行，从而减少单次垃圾收集的影响。</li><li>……</li></ul><h3 id="_1-5-4-v8-引擎的详细内存图" tabindex="-1">1.5.4 V8 引擎的详细内存图 <a class="header-anchor" href="#_1-5-4-v8-引擎的详细内存图" aria-label="Permalink to &quot;1.5.4 V8 引擎的详细内存图&quot;">​</a></h3><ul><li>事实上，V8 引擎为了提供内存的管理效率，对内存进行非常详细的划分：</li></ul><p><img src="'+h+`" alt="image-20230809161327865" loading="lazy"></p><h1 id="第二章-javascript-中的闭包-⭐" tabindex="-1">第二章：JavaScript 中的闭包（⭐） <a class="header-anchor" href="#第二章-javascript-中的闭包-⭐" aria-label="Permalink to &quot;第二章：JavaScript 中的闭包（⭐）&quot;">​</a></h1><h2 id="_2-1-javascript-受到哪些编程语言的影响" tabindex="-1">2.1 JavaScript 受到哪些编程语言的影响? <a class="header-anchor" href="#_2-1-javascript-受到哪些编程语言的影响" aria-label="Permalink to &quot;2.1 JavaScript 受到哪些编程语言的影响?&quot;">​</a></h2><ul><li>JavaScript 借鉴了以下编程语言： <ul><li><code>Java</code>：JavaScript 的语法和面向对象的特性受到了 Java 的影响，如：JavaScript 中的类和对象的概念与 Java 相似。</li><li><code>C</code>：JavaScript 的基本语法和控制结构与 C 语言相似，如：JavaScript 中的循环和条件语句的写法与 C 相似。</li><li><code>Perl</code>：JavaScript 借鉴了 Perl 的正则表达式的语法和功能。JavaScript 中的正则表达式与 Perl 的正则表达式非常相似。</li><li><code>Scheme</code>：JavaScript 借鉴了 Scheme 的函数式编程特性。JavaScript 中的函数可以作为一等公民，可以作为参数传递、赋值给变量等。</li><li><code>Self</code>：JavaScript 借鉴了 Self 的原型继承的概念。JavaScript 中的对象可以通过原型链来继承属性和方法。</li><li><code>Lua</code>：JavaScript 借鉴了 Lua 的轻量级和灵活性。JavaScript 的语言设计也强调了简洁和灵活。</li></ul></li><li>总而言之，这些编程语言的特性和思想对 JavaScript 的发展和演变产生了深远的影响。</li></ul><h2 id="_2-2-闭包的定义" tabindex="-1">2.2 闭包的定义 <a class="header-anchor" href="#_2-2-闭包的定义" aria-label="Permalink to &quot;2.2 闭包的定义&quot;">​</a></h2><ul><li>在维基百科中对闭包的定义是： <ul><li>闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures）。</li><li>是在支持 <code>头等函数</code> 的编程语言中，实现词法绑定的一种技术。</li><li>闭包在实现上是一个<code>结构体（C语言等的语法）</code>，它存储了<code>一个函数</code>和<code>一个关联的环境</code>（相当于一个符号查找表）。</li><li>闭包跟函数最大的区别在于，当捕捉闭包的时候，它的 <code>自由变量</code> 会在捕捉时被确定，这样即使脱离了捕捉时的上下文，它也能照常运行。</li></ul></li></ul><blockquote><p>注意：</p><ul><li>闭包的概念出现于 60 年代，最早实现闭包的程序是 <code>Scheme</code>。</li><li>JavaScript 借鉴了 Scheme 的函数式编程特性，从而使得 JavaScript 可以实现函数式编程。</li></ul></blockquote><ul><li>MDN 对 JavaScript 中闭包的解释： <ul><li>一个函数和对其周围状态（lexical environment，<code>词法环境</code>）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<code>闭包（closure）</code>。</li><li>也就是说，闭包让我们可以在一个内层函数中访问到其外层函数的作用域。</li><li>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</li></ul></li></ul><blockquote><p>注意：</p><ul><li>一个普通的函数 function ，如果它可以<code>访问外层作用域的自由变量</code>，那么这<code>个函数</code>和<code>周围环境</code>就是一个<code>闭包</code>。</li><li>从广义的角度来说：JavaScript 中的函数都是闭包。</li><li>从狭义的角度来说：JavaScript 中一个函数，如果访问了外层作用域的变量，那么它是一个闭包。</li></ul></blockquote><h2 id="_2-3-闭包的访问过程" tabindex="-1">2.3 闭包的访问过程 <a class="header-anchor" href="#_2-3-闭包的访问过程" aria-label="Permalink to &quot;2.3 闭包的访问过程&quot;">​</a></h2><ul><li>示例：</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IE=edge&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-UA-Compatible&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Title&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addr5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addr5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addr5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 7</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ul><li>编译期：</li></ul><p><img src="`+o+'" alt="" loading="lazy"></p><ul><li>运行时：</li></ul><p><img src="'+d+'" alt="" loading="lazy"></p><ul><li>编译期：</li></ul><p><img src="'+c+'" alt="" loading="lazy"></p><ul><li>运行时：</li></ul><p><img src="'+k+'" alt="" loading="lazy"></p><ul><li>编译期：</li></ul><p><img src="'+E+'" alt="" loading="lazy"></p><ul><li>运行时：</li></ul><p><img src="'+u+'" alt="" loading="lazy"></p><h2 id="_2-4-为什么闭包会产生内存泄漏" tabindex="-1">2.4 为什么闭包会产生内存泄漏 <a class="header-anchor" href="#_2-4-为什么闭包会产生内存泄漏" aria-label="Permalink to &quot;2.4 为什么闭包会产生内存泄漏&quot;">​</a></h2><ul><li>以上面的案例为例，当所有的代码都执行完毕，并且后续也不再使用 <code>createAddr()</code> 函数，如下所示：</li></ul><p><img src="'+g+'" alt="" loading="lazy"></p><ul><li>根据 GC 的可达性算法，全局作用域下的 <code>addr5</code> 变量对 <code>0x201</code> 的函数对象有引用，并且 <code>0x201</code> 函数对象的作用域又引用了 AO 对象（0x200），最终造成这部分内存无法释放。</li><li>总而言之，所谓的闭包会造成内存泄漏，就是引用链中的所有对象无法释放。</li></ul><blockquote><p>注意：解决方案就是如果确定不再使用，就将 addr5 = null 即可。</p></blockquote>',66),b=[y];function _(v,q,F,C,f,S){return s(),a("div",null,b)}const x=i(m,[["render",_]]);export{w as __pageData,x as default};
